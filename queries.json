{

    "count_0_0_1": {
        "influx": "from(bucket: \"example_bucket0\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\") |> filter(fn: (r) => r._field == \"field1\") |> count() |> group(columns: []) |> sum() |> yield(name: \"total_count\")",
        "postgres": "SELECT SUM(count) FROM (SELECT COUNT(field1) AS count FROM example_table0 WHERE measurement = 'example_measurement0') subquery;",
        "config": { "amountOfData": 1234556 }
    },
    "count_0_0_3": {
        "influx": "from(bucket: \"example_bucket0\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\") |> filter(fn: (r) => r._field == \"field1\" or r._field == \"field2\" or r._field == \"field3\") |> count() |> group(columns: []) |> sum() |> yield(name: \"total_count\")",
        "postgres": "SELECT SUM(count) FROM (SELECT COUNT(field1) + COUNT(field2) + COUNT(field3) AS count FROM example_table0 WHERE measurement='example_measurement0') subquery;",
        "config": { "amountOfData": 1234556 }
    },
    "count_0_2_1": {
        "influx": "from(bucket: \"example_bucket0\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\" or r._measurement == \"example_measurement1\" or r._measurement == \"example_measurement2\") |> filter(fn: (r) => r._field == \"field1\") |> count() |> group(columns: []) |> sum() |> yield(name: \"total_count\")",
        "postgres": "SELECT SUM(count) FROM (SELECT COUNT(field1) AS count FROM example_table0 WHERE measurement IN ('example_measurement0', 'example_measurement1', 'example_measurement2')) subquery;",
        "config": { "amountOfData": 1234556 }
    },
    "count_0_2_3": {
        "influx": "from(bucket: \"example_bucket0\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\" or r._measurement == \"example_measurement1\" or r._measurement == \"example_measurement2\") |> filter(fn: (r) => r._field == \"field1\" or r._field == \"field2\" or r._field == \"field3\") |> count() |> group(columns: []) |> sum() |> yield(name: \"total_count\")",
        "postgres": "SELECT SUM(count) FROM (SELECT COUNT(field1) + COUNT(field2) + COUNT(field3) AS count FROM example_table0 WHERE measurement IN ('example_measurement0', 'example_measurement1', 'example_measurement2')) subquery;",
        "config": { "amountOfData": 1234556 }
    },
    "count_2_2_1": {
        "influx": "union(tables:[from(bucket: \"example_bucket0\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\" or r._measurement == \"example_measurement1\" or r._measurement == \"example_measurement2\") |> filter(fn: (r) => r._field == \"field1\") |> count(), from(bucket: \"example_bucket1\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\" or r._measurement == \"example_measurement1\" or r._measurement == \"example_measurement2\") |> filter(fn: (r) => r._field == \"field1\") |> count(), from(bucket: \"example_bucket2\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\" or r._measurement == \"example_measurement1\" or r._measurement == \"example_measurement2\") |> filter(fn: (r) => r._field == \"field1\") |> count()]) |> group(columns: []) |> sum() |> yield(name: \"total_count\")",
        "postgres": "SELECT SUM(count) FROM (SELECT COUNT(field1) AS count FROM example_table0 WHERE measurement IN ('example_measurement0', 'example_measurement1', 'example_measurement2') UNION ALL SELECT COUNT(field1) FROM example_table1 WHERE measurement IN ('example_measurement0', 'example_measurement1', 'example_measurement2') UNION ALL SELECT COUNT(field1) FROM example_table2 WHERE measurement IN ('example_measurement0', 'example_measurement1', 'example_measurement2')) subquery;",
        "config": { "amountOfData": 1234556 }
    },
    "count_2_2_3": {
        "influx": "union(tables:[from(bucket: \"example_bucket0\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\" or r._measurement == \"example_measurement1\" or r._measurement == \"example_measurement2\") |> filter(fn: (r) => r._field == \"field1\" or r._field == \"field2\" or r._field == \"field3\") |> count(), from(bucket: \"example_bucket1\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\" or r._measurement == \"example_measurement1\" or r._measurement == \"example_measurement2\") |> filter(fn: (r) => r._field == \"field1\" or r._field == \"field2\" or r._field == \"field3\") |> count(), from(bucket: \"example_bucket2\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\" or r._measurement == \"example_measurement1\" or r._measurement == \"example_measurement2\") |> filter(fn: (r) => r._field == \"field1\" or r._field == \"field2\" or r._field == \"field3\") |> count()]) |> group(columns: []) |> sum() |> yield(name: \"total_count\")",
        "postgres": "SELECT SUM(count) FROM (SELECT COUNT(field1) + COUNT(field2) + COUNT(field3) AS count FROM example_table0 WHERE measurement IN ('example_measurement0', 'example_measurement1', 'example_measurement2') UNION ALL SELECT COUNT(field1) + COUNT(field2) + COUNT(field3) FROM example_table1 WHERE measurement IN ('example_measurement0', 'example_measurement1', 'example_measurement2') UNION ALL SELECT COUNT(field1) + COUNT(field2) + COUNT(field3) FROM example_table2 WHERE measurement IN ('example_measurement0', 'example_measurement1', 'example_measurement2')) subquery;",
        "config": { "amountOfData": 1234556 }
    },
    "integral_0_0_1": {
    "influx": "from(bucket: \"example_bucket0\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\") |> filter(fn: (r) => r._field == \"field1\") |> integral())",
    "postgres": "SELECT SUM((next_time - timestamp) * (field1 + next_field1) / 2) AS total_integral FROM (SELECT timestamp, field1, LEAD(timestamp) OVER (ORDER BY timestamp) AS next_time, LEAD(field1) OVER (ORDER BY timestamp) AS next_field1 FROM example_table0 WHERE measurement='example_measurement0') t WHERE next_time IS NOT NULL;",
    "config": {
      "amountOfData": 1234556
    }
  }, 
  "integral_0_0_3": {
    "influx": "from(bucket: \"example_bucket0\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\") |> filter(fn: (r) => r._field == \"field1\" or r._field == \"field2\" or r._field == \"field3\") |> integral() |> sum() |> group() |> sum(column:\"_value\")",
    "postgres": "SELECT SUM(integral_value1 + integral_value2 + integral_value3) AS total_integral_value1 FROM (SELECT SUM((next_time - timestamp) * (field1 + next_value1) / 2) AS integral_value1, SUM((next_time - timestamp) * (field2 + next_value2) / 2) AS integral_value2, SUM((next_time - timestamp) * (field3 + next_value3) / 2) AS integral_value3 FROM (SELECT timestamp, field1, field2, field3, LEAD(timestamp) OVER (ORDER BY timestamp) AS next_time, LEAD(field1) OVER (ORDER BY timestamp) AS next_value1, LEAD(field2) OVER (ORDER BY timestamp) AS next_value2, LEAD(field3) OVER (ORDER BY timestamp) AS next_value3 FROM example_table0 WHERE measurement = 'example_measurement0') t WHERE next_time IS NOT NULL);",
    "config": {
      "amountOfData": 1234556
    }
  },
  "integral_0_2_1": {
    "influx": "from(bucket: \"example_bucket0\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\" or r._measurement == \"example_measurement1\" or r._measurement == \"example_measurement2\") |> filter(fn: (r) => r._field == \"field1\") |> integral() |> sum() |> yield(name: \"total_integral\")",
    "postgres": "SELECT SUM((next_time - timestamp) * (field1 + next_field1) / 2) AS total_integral FROM (SELECT timestamp, field1, LEAD(timestamp) OVER (ORDER BY timestamp) AS next_time, LEAD(field1) OVER (ORDER BY timestamp) AS next_field1 FROM example_table0 WHERE measurement IN ('example_measurement0','example_measurement1','example_measurement2')) t WHERE next_time IS NOT NULL;",
    "config": {
      "amountOfData": 1234556
    }
  },
  "integral_0_2_3": {
    "influx": "from(bucket: \"example_bucket0\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\" or r._measurement == \"example_measurement1\" or r._measurement == \"example_measurement2\") |> filter(fn: (r) => r._field == \"field1\" or r._field == \"field2\" or r._field == \"field3\") |> integral() |> sum() |> yield(name: \"total_integral\")",
    "postgres": "SELECT SUM(integral_value1 + integral_value2 + integral_value3) AS total_integral_value1 FROM (SELECT SUM((next_time - timestamp) * (field1 + next_value1) / 2) AS integral_value1, SUM((next_time - timestamp) * (field2 + next_value2) / 2) AS integral_value2, SUM((next_time - timestamp) * (field3 + next_value3) / 2) AS integral_value3 FROM (SELECT timestamp, field1, field2, field3, LEAD(timestamp) OVER (ORDER BY timestamp) AS next_time, LEAD(field1) OVER (ORDER BY timestamp) AS next_value1, LEAD(field2) OVER (ORDER BY timestamp) AS next_value2, LEAD(field3) OVER (ORDER BY timestamp) AS next_value3 FROM example_table0 WHERE measurement IN ('example_measurement0','example_measurement1','example_measurement2') ) t WHERE next_time IS NOT NULL);",
    "config": {
      "amountOfData": 1234556
    }
  },
  "integral_2_2_1": {
    "influx": "from(bucket: \"example_bucket0\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\" or r._measurement == \"example_measurement1\" or r._measurement == \"example_measurement2\") |> filter(fn: (r) => r._field == \"field1\") |> integral() |> sum() |> yield(name: \"total_integral\")",
    "postgres": "SELECT SUM(integral_value1) as total_integral_value1 FROM ( SELECT SUM((next_time - timestamp) * (field1 + next_value1) / 2) AS integral_value1 FROM ( SELECT timestamp, field1, LEAD(timestamp) OVER (ORDER BY timestamp) AS next_time, LEAD(field1) OVER (ORDER BY timestamp) AS next_value1 FROM example_table0 WHERE measurement IN ('example_measurement0', 'example_measurement1', 'example_measurement3') ) t WHERE next_time IS NOT NULL UNION ALL SELECT SUM((next_time - timestamp) * (field1 + next_value1) / 2) AS integral_value1 FROM ( SELECT timestamp, field1, LEAD(timestamp) OVER (ORDER BY timestamp) AS next_time, LEAD(field1) OVER (ORDER BY timestamp) AS next_value1 FROM example_table1 WHERE measurement IN ('example_measurement0', 'example_measurement1', 'example_measurement3') ) t WHERE next_time IS NOT NULL UNION ALL SELECT SUM((next_time - timestamp) * (field1 + next_value1) / 2) AS integral_value1 FROM ( SELECT timestamp, field1, LEAD(timestamp) OVER (ORDER BY timestamp) AS next_time, LEAD(field1) OVER (ORDER BY timestamp) AS next_value1 FROM example_table2 WHERE measurement IN ('example_measurement0', 'example_measurement1', 'example_measurement3') ) t WHERE next_time IS NOT NULL ) t;",
    "config": {
      "amountOfData": 1234556
    }
  },
  "integral_2_2_3": {
    "influx": "union(tables: [from(bucket: \"example_bucket0\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\" or r._measurement == \"example_measurement1\" or r._measurement == \"example_measurement3\") |> filter(fn: (r) => r._field == \"value1\" or r._field == \"value2\" or r._field == \"value3\") |> integral(), from(bucket: \"example_bucket1\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\" or r._measurement == \"example_measurement1\" or r._measurement == \"example_measurement3\") |> filter(fn: (r) => r._field == \"value1\" or r._field == \"value2\" or r._field == \"value3\") |> integral(), from(bucket: \"example_bucket2\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\" or r._measurement == \"example_measurement1\" or r._measurement == \"example_measurement3\") |> filter(fn: (r) => r._field == \"value1\" or r._field == \"value2\" or r._field == \"value3\") |> integral()]) |> sum() |> yield(name: \"total_integral\")",
    "postgres":"SELECT SUM(integral_value1 + integral_value2 + integral_value3) AS total_integral_value1 FROM ( SELECT SUM((next_time - timestamp) * (field1 + next_value1) / 2) AS integral_value1, SUM((next_time - timestamp) * (field2 + next_value2) / 2) AS integral_value2, SUM((next_time - timestamp) * (field3 + next_value3) / 2) AS integral_value3 FROM ( SELECT timestamp, field1, field2, field3, LEAD(timestamp) OVER (ORDER BY timestamp) AS next_time, LEAD(field1) OVER (ORDER BY timestamp) AS next_value1, LEAD(field2) OVER (ORDER BY timestamp) AS next_value2, LEAD(field3) OVER (ORDER BY timestamp) AS next_value3 FROM example_table0 WHERE measurement IN ('example_measurement0', 'example_measurement1', 'example_measurement3') ) t WHERE next_time IS NOT NULL UNION ALL SELECT SUM((next_time - timestamp) * (field1 + next_value1) / 2) AS integral_value1, SUM((next_time - timestamp) * (field2 + next_value2) / 2) AS integral_value2, SUM((next_time - timestamp) * (field3 + next_value3) / 2) AS integral_value3 FROM ( SELECT timestamp, field1, field2, field3, LEAD(timestamp) OVER (ORDER BY timestamp) AS next_time, LEAD(field1) OVER (ORDER BY timestamp) AS next_value1, LEAD(field2) OVER (ORDER BY timestamp) AS next_value2, LEAD(field3) OVER (ORDER BY timestamp) AS next_value3 FROM example_table1 WHERE measurement IN ('example_measurement0', 'example_measurement1', 'example_measurement3') ) t WHERE next_time IS NOT NULL UNION ALL SELECT SUM((next_time - timestamp) * (field1 + next_value1) / 2) AS integral_value1, SUM((next_time - timestamp) * (field2 + next_value2) / 2) AS integral_value2, SUM((next_time - timestamp) * (field3 + next_value3) / 2) AS integral_value3 FROM ( SELECT timestamp, field1, field2, field3, LEAD(timestamp) OVER (ORDER BY timestamp) AS next_time, LEAD(field1) OVER (ORDER BY timestamp) AS next_value1, LEAD(field2) OVER (ORDER BY timestamp) AS next_value2, LEAD(field3) OVER (ORDER BY timestamp) AS next_value3 FROM example_table2 WHERE measurement IN ('example_measurement0', 'example_measurement1', 'example_measurement3') ) t WHERE next_time IS NOT NULL ) t;",
    "config": {
      "amountOfData": 1234556
    }
  },
    "mean_0_0_1": {
        "influx": "from(bucket: \"example_bucket0\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\") |> filter(fn: (r) => r._field == \"field1\") |> mean()",
        "postgres": "SELECT AVG(field1) FROM example_table0 WHERE measurement = 'example_measurement0';",
        "config": { "amountOfData": 1234556 }
    },
    "mean_0_0_3": {
        "influx": "from(bucket: \"example_bucket0\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\") |> filter (fn:(r) => (r._field == \"field1\" or r._field == \"field2\" or r._field == \"field3\")) |> group(columns:[]) |> mean()",
        "postgres": "SELECT AVG(field1), AVG(field2), AVG(field3) FROM example_table0 WHERE measurement='example_measurement0';",
        "config": { "amountOfData": 1234556 }
    },
    "mean_0_2_1": {
        "influx": "from(bucket: \"example_bucket0\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\" or r._measurement == \"example_measurement1\" or r._measurement == \"example_measurement2\") |> filter(fn: (r) => r._field == \"field1\") |> group(columns:[]) |> mean()",
        "postgres": "SELECT AVG(field1) FROM example_table0 WHERE measurement IN ('example_measurement0', 'example_measurement1', 'example_measurement2');",
        "config": { "amountOfData": 1234556 }
    },
    "mean_0_2_3": {
        "influx": "from(bucket: \"example_bucket0\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\" or r._measurement == \"example_measurement1\" or r._measurement == \"example_measurement2\") |> filter(fn: (r) => r._field == \"field1\" or r._field == \"field2\" or r._field == \"field3\") |> group(columns:[]) |> mean()",
        "postgres": "SELECT AVG(field1), AVG(field2), AVG(field3) FROM example_table0 WHERE measurement IN ('example_measurement0', 'example_measurement1', 'example_measurement2');",
        "config": { "amountOfData": 1234556 }
    },
    "mean_2_2_1": {
        "influx": "union(tables:[from(bucket: \"example_bucket0\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\" or r._measurement == \"example_measurement1\" or r._measurement == \"example_measurement2\") |> filter(fn: (r) => r._field == \"field1\"), from(bucket: \"example_bucket1\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\" or r._measurement == \"example_measurement1\" or r._measurement == \"example_measurement2\") |> filter(fn: (r) => r._field == \"field1\"), from(bucket: \"example_bucket2\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\" or r._measurement == \"example_measurement1\" or r._measurement == \"example_measurement2\") |> filter(fn: (r) => r._field == \"field1\")]) |> group(columns: []) |> mean()",
        "postgres": "SELECT AVG(field1) FROM example_table0 WHERE measurement IN ('example_measurement0', 'example_measurement1', 'example_measurement2') UNION ALL SELECT AVG(field1) FROM example_table1 WHERE measurement IN ('example_measurement0', 'example_measurement1', 'example_measurement2') UNION ALL SELECT AVG(field1) FROM example_table2 WHERE measurement IN ('example_measurement0', 'example_measurement1', 'example_measurement2');",
        "config": { "amountOfData": 1234556 }
    },
    "mean_2_2_3": {
        "influx":"union(tables:[from(bucket: \"example_bucket0\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\" or r._measurement == \"example_measurement1\" or r._measurement == \"example_measurement2\") |> filter(fn: (r) => r._field == \"field1\" or r._field == \"field2\" or r._field == \"field3\"), from(bucket: \"example_bucket1\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\" or r._measurement == \"example_measurement1\" or r._measurement == \"example_measurement2\") |> filter(fn: (r) => r._field == \"field1\" or r._field == \"field2\" or r._field == \"field3\"), from(bucket: \"example_bucket2\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\" or r._measurement == \"example_measurement1\" or r._measurement == \"example_measurement2\") |> filter(fn: (r) => r._field == \"field1\" or r._field == \"field2\" or r._field == \"field3\")]) |> group(columns: []) |> mean()",
        "postgres": "SELECT AVG(field1), AVG(field2), AVG(field3) FROM example_table0 WHERE measurement IN ('example_measurement0', 'example_measurement1', 'example_measurement2') UNION ALL SELECT AVG(field1), AVG(field2), AVG(field3) FROM example_table1 WHERE measurement IN ('example_measurement0', 'example_measurement1', 'example_measurement2') UNION ALL SELECT AVG(field1), AVG(field2), AVG(field3) FROM example_table2 WHERE measurement IN ('example_measurement0', 'example_measurement1', 'example_measurement2');",
        "config": { "amountOfData": 1234556 }
    },
    "median_0_0_1": {
        "influx": "from(bucket: \"example_bucket0\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\") |> filter(fn: (r) => r._field == \"field1\") |> median()",
        "postgres": "SELECT percentile_cont(0.5) WITHIN GROUP (ORDER BY field1) FROM example_table0 WHERE measurement = 'example_measurement0';",
        "config": { "amountOfData": 1234556 }
    },
    "median_0_0_3": {
        "influx": "from(bucket: \"example_bucket0\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\") |> filter(fn: (r) => r._field == \"field1\" or r._field == \"field2\" or r._field == \"field3\") |> group(columns:[]) |> median()",
        "postgres": "SELECT percentile_cont(0.5) WITHIN GROUP (ORDER BY field1), percentile_cont(0.5) WITHIN GROUP (ORDER BY field2), percentile_cont(0.5) WITHIN GROUP (ORDER BY field3) FROM example_table0 WHERE measurement='example_measurement0';",
        "config": { "amountOfData": 1234556 }
    },
    "median_0_2_1": {
        "influx": "from(bucket: \"example_bucket0\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\" or r._measurement == \"example_measurement1\" or r._measurement == \"example_measurement2\") |> filter(fn: (r) => r._field == \"field1\") |> group(columns:[]) |> median()",
        "postgres": "SELECT percentile_cont(0.5) WITHIN GROUP (ORDER BY field1) FROM example_table0 WHERE measurement IN ('example_measurement0', 'example_measurement1', 'example_measurement2');",
        "config": { "amountOfData": 1234556 }
    },
    "median_0_2_3": {
        "influx": "from(bucket: \"example_bucket0\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\" or r._measurement == \"example_measurement1\" or r._measurement == \"example_measurement2\") |> filter(fn: (r) => r._field == \"field1\" or r._field == \"field2\" or r._field == \"field3\") |> group(columns:[]) |> median()",
        "postgres": "SELECT percentile_cont(0.5) WITHIN GROUP (ORDER BY field1), percentile_cont(0.5) WITHIN GROUP (ORDER BY field2), percentile_cont(0.5) WITHIN GROUP (ORDER BY field3) FROM example_table0 WHERE measurement IN ('example_measurement0', 'example_measurement1', 'example_measurement2');",
        "config": { "amountOfData": 1234556 }
    },
    "median_2_2_1": {
        "influx": "union(tables:[from(bucket: \"example_bucket0\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\" or r._measurement == \"example_measurement1\" or r._measurement == \"example_measurement2\") |> filter(fn: (r) => r._field == \"field1\"), from(bucket: \"example_bucket1\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\" or r._measurement == \"example_measurement1\" or r._measurement == \"example_measurement2\") |> filter(fn: (r) => r._field == \"field1\"), from(bucket: \"example_bucket2\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\" or r._measurement == \"example_measurement1\" or r._measurement == \"example_measurement2\") |> filter(fn: (r) => r._field == \"field1\")]) |> group(columns:[]) |> median()",
        "postgres": "SELECT percentile_cont(0.5) WITHIN GROUP (ORDER BY field1) FROM example_table0 WHERE measurement IN ('example_measurement0', 'example_measurement1', 'example_measurement2') UNION ALL SELECT percentile_cont(0.5) WITHIN GROUP (ORDER BY field1) FROM example_table1 WHERE measurement IN ('example_measurement0', 'example_measurement1', 'example_measurement2') UNION ALL SELECT percentile_cont(0.5) WITHIN GROUP (ORDER BY field1) FROM example_table2 WHERE measurement IN ('example_measurement0', 'example_measurement1', 'example_measurement2');",
        "config": { "amountOfData": 1234556 }
    },
    "median_2_2_3": {
        "influx": "union(tables:[from(bucket: \"example_bucket0\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\" or r._measurement == \"example_measurement1\" or r._measurement == \"example_measurement2\") |> filter(fn: (r) => r._field == \"field1\" or r._field == \"field2\" or r._field == \"field3\"), from(bucket: \"example_bucket1\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\" or r._measurement == \"example_measurement1\" or r._measurement == \"example_measurement2\") |> filter(fn: (r) => r._field == \"field1\" or r._field == \"field2\" or r._field == \"field3\"), from(bucket: \"example_bucket2\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\" or r._measurement == \"example_measurement1\" or r._measurement == \"example_measurement2\") |> filter(fn: (r) => r._field == \"field1\" or r._field == \"field2\" or r._field == \"field3\")]) |> group(columns:[]) |> median() ",
        "postgres": "SELECT percentile_cont(0.5) WITHIN GROUP (ORDER BY field1), percentile_cont(0.5) WITHIN GROUP (ORDER BY field2), percentile_cont(0.5) WITHIN GROUP (ORDER BY field3) FROM example_table0 WHERE measurement IN ('example_measurement0', 'example_measurement1', 'example_measurement2') UNION ALL SELECT percentile_cont(0.5) WITHIN GROUP (ORDER BY field1), percentile_cont(0.5) WITHIN GROUP (ORDER BY field2), percentile_cont(0.5) WITHIN GROUP (ORDER BY field3) FROM example_table1 WHERE measurement IN ('example_measurement0', 'example_measurement1', 'example_measurement2') UNION ALL SELECT percentile_cont(0.5) WITHIN GROUP (ORDER BY field1), percentile_cont(0.5) WITHIN GROUP (ORDER BY field2), percentile_cont(0.5) WITHIN GROUP (ORDER BY field3) FROM example_table2 WHERE measurement IN ('example_measurement0', 'example_measurement1', 'example_measurement2');",
        "config": { "amountOfData": 1234556 }
    },
    "mode_0_0_1": {
        "influx": "from(bucket: \"example_bucket0\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\") |> filter(fn: (r) => r._field == \"field1\") |> mode()",
        "postgres": "SELECT mode() WITHIN GROUP (ORDER BY field1) FROM example_table0 WHERE measurement = 'example_measurement0';",
        "config": { "amountOfData": 1234556 }
    },
    "mode_0_0_3": {
        "influx": "from(bucket: \"example_bucket0\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\") |> filter(fn: (r) => r._field == \"field1\" or r._field == \"field2\" or r._field == \"field3\") |> pivot(rowKey:[\"_time\"], columnKey:[\"_field\"], valueColumn: \"_value\") |> group(columns:[]) |> mode()",
        "postgres": "SELECT mode() WITHIN GROUP (ORDER BY field1), mode() WITHIN GROUP (ORDER BY field2), mode() WITHIN GROUP (ORDER BY field3) FROM example_table0 WHERE measurement='example_measurement0';",
        "config": { "amountOfData": 1234556 }
    },
    "mode_0_2_1": {
        "influx": "from(bucket: \"example_bucket0\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\" or r._measurement == \"example_measurement1\" or r._measurement == \"example_measurement2\") |> filter(fn: (r) => r._field == \"field1\") |> mode()",
        "postgres": "SELECT mode() WITHIN GROUP (ORDER BY field1) FROM example_table0 WHERE measurement IN ('example_measurement0', 'example_measurement1', 'example_measurement2');",
        "config": { "amountOfData": 1234556 }
    },
    "mode_0_2_3": {
        "influx": "from(bucket: \"example_bucket0\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\" or r._measurement == \"example_measurement1\" or r._measurement == \"example_measurement2\") |> filter(fn: (r) => r._field == \"field1\" or r._field == \"field2\" or r._field == \"field3\") |> mode()",
        "postgres": "SELECT mode() WITHIN GROUP (ORDER BY field1), mode() WITHIN GROUP (ORDER BY field2), mode() WITHIN GROUP (ORDER BY field3) FROM example_table0 WHERE measurement IN ('example_measurement0', 'example_measurement1', 'example_measurement2');",
        "config": { "amountOfData": 1234556 }
    },
    "mode_2_2_1": {
        "influx": "union(tables:[from(bucket: \"example_bucket0\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\" or r._measurement == \"example_measurement1\" or r._measurement == \"example_measurement2\") |> filter(fn: (r) => r._field == \"field1\") |> mode(), from(bucket: \"example_bucket1\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\" or r._measurement == \"example_measurement1\" or r._measurement == \"example_measurement2\") |> filter(fn: (r) => r._field == \"field1\") |> mode(), from(bucket: \"example_bucket2\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\" or r._measurement == \"example_measurement1\" or r._measurement == \"example_measurement2\") |> filter(fn: (r) => r._field == \"field1\") |> mode()])",
        "postgres": "SELECT mode() WITHIN GROUP (ORDER BY field1) FROM example_table0 WHERE measurement IN ('example_measurement0', 'example_measurement1', 'example_measurement2') UNION ALL SELECT mode() WITHIN GROUP (ORDER BY field1) FROM example_table1 WHERE measurement IN ('example_measurement0', 'example_measurement1', 'example_measurement2') UNION ALL SELECT mode() WITHIN GROUP (ORDER BY field1) FROM example_table2 WHERE measurement IN ('example_measurement0', 'example_measurement1', 'example_measurement2');",
        "config": { "amountOfData": 1234556 }
    },
    "mode_2_2_3": {
        "influx": "union(tables:[from(bucket: \"example_bucket0\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\" or r._measurement == \"example_measurement1\" or r._measurement == \"example_measurement2\") |> filter(fn: (r) => r._field == \"field1\" or r._field == \"field2\" or r._field == \"field3\") |> mode(), from(bucket: \"example_bucket1\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\" or r._measurement == \"example_measurement1\" or r._measurement == \"example_measurement2\") |> filter(fn: (r) => r._field == \"field1\" or r._field == \"field2\" or r._field == \"field3\") |> mode(), from(bucket: \"example_bucket2\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\" or r._measurement == \"example_measurement1\" or r._measurement == \"example_measurement2\") |> filter(fn: (r) => r._field == \"field1\" or r._field == \"field2\" or r._field == \"field3\") |> mode()])",
        "postgres": "SELECT mode() WITHIN GROUP (ORDER BY field1), mode() WITHIN GROUP (ORDER BY field2), mode() WITHIN GROUP (ORDER BY field3) FROM example_table0 WHERE measurement IN ('example_measurement0', 'example_measurement1', 'example_measurement2') UNION ALL SELECT mode() WITHIN GROUP (ORDER BY field1), mode() WITHIN GROUP (ORDER BY field2), mode() WITHIN GROUP (ORDER BY field3) FROM example_table1 WHERE measurement IN ('example_measurement0', 'example_measurement1', 'example_measurement2') UNION ALL SELECT mode() WITHIN GROUP (ORDER BY field1), mode() WITHIN GROUP (ORDER BY field2), mode() WITHIN GROUP (ORDER BY field3) FROM example_table2 WHERE measurement IN ('example_measurement0', 'example_measurement1', 'example_measurement2');",
        "config": { "amountOfData": 1234556 }
    },
    "spread_0_0_1": {
        "influx": "from(bucket: \"example_bucket0\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\") |> filter(fn: (r) => r._field == \"field1\") |> spread()",
        "postgres": "SELECT MAX(field1) - MIN(field1) FROM example_table0 WHERE measurement = 'example_measurement0';",
        "config": { "amountOfData": 1234556 }
    },
    "spread_0_0_3": {
        "influx": "from(bucket: \"example_bucket0\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\") |> filter(fn: (r) => r._field == \"field1\" or r._field == \"field2\" or r._field == \"field3\") |> group(columns:[]) |> spread()",
        "postgres": "SELECT MAX(field1) - MIN(field1), MAX(field2) - MIN(field2), MAX(field3) - MIN(field3) FROM example_table0 WHERE measurement='example_measurement0';",
        "config": { "amountOfData": 1234556 }
    },
    "spread_0_2_1": {
        "influx": "from(bucket: \"example_bucket0\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\" or r._measurement == \"example_measurement1\" or r._measurement == \"example_measurement2\") |> filter(fn: (r) => r._field == \"field1\") |> group(columns:[]) |> spread()",
        "postgres": "SELECT MAX(field1) - MIN(field1) FROM example_table0 WHERE measurement IN ('example_measurement0', 'example_measurement1', 'example_measurement2');",
        "config": { "amountOfData": 1234556 }
    },
    "spread_0_2_3": {
        "influx": "from(bucket: \"example_bucket0\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\" or r._measurement == \"example_measurement1\" or r._measurement == \"example_measurement2\") |> filter(fn: (r) => r._field == \"field1\" or r._field == \"field2\" or r._field == \"field3\") |> group(columns:[]) |> spread()",
        "postgres": "SELECT MAX(field1) - MIN(field1), MAX(field2) - MIN(field2), MAX(field3) - MIN(field3) FROM example_table0 WHERE measurement IN ('example_measurement0', 'example_measurement1', 'example_measurement2');",
        "config": { "amountOfData": 1234556 }
    },
    "spread_2_2_1": {
        "influx": "union(tables:[from(bucket: \"example_bucket0\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\" or r._measurement == \"example_measurement1\" or r._measurement == \"example_measurement2\") |> filter(fn: (r) => r._field == \"field1\"), from(bucket: \"example_bucket1\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\" or r._measurement == \"example_measurement1\" or r._measurement == \"example_measurement2\") |> filter(fn: (r) => r._field == \"field1\"), from(bucket: \"example_bucket2\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\" or r._measurement == \"example_measurement1\" or r._measurement == \"example_measurement2\") |> filter(fn: (r) => r._field == \"field1\")])|> group(columns:[]) |> spread()",
        "postgres": "SELECT MAX(field1) - MIN(field1) FROM example_table0 WHERE measurement IN ('example_measurement0', 'example_measurement1', 'example_measurement2') UNION ALL SELECT MAX(field1) - MIN(field1) FROM example_table1 WHERE measurement IN ('example_measurement0', 'example_measurement1', 'example_measurement2') UNION ALL SELECT MAX(field1) - MIN(field1) FROM example_table2 WHERE measurement IN ('example_measurement0', 'example_measurement1', 'example_measurement2');",
        "config": { "amountOfData": 1234556 }
    },
    "spread_2_2_3": {
        "influx": "union(tables:[from(bucket: \"example_bucket0\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\" or r._measurement == \"example_measurement1\" or r._measurement == \"example_measurement2\") |> filter(fn: (r) => r._field == \"field1\" or r._field == \"field2\" or r._field == \"field3\"), from(bucket: \"example_bucket1\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\" or r._measurement == \"example_measurement1\" or r._measurement == \"example_measurement2\") |> filter(fn: (r) => r._field == \"field1\" or r._field == \"field2\" or r._field == \"field3\"), from(bucket: \"example_bucket2\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\" or r._measurement == \"example_measurement1\" or r._measurement == \"example_measurement2\") |> filter(fn: (r) => r._field == \"field1\" or r._field == \"field2\" or r._field == \"field3\")]) |> group(columns:[]) |> spread()",
        "postgres": "SELECT MAX(field1) - MIN(field1), MAX(field2) - MIN(field2), MAX(field3) - MIN(field3) FROM example_table0 WHERE measurement IN ('example_measurement0', 'example_measurement1', 'example_measurement2') UNION ALL SELECT MAX(field1) - MIN(field1), MAX(field2) - MIN(field2), MAX(field3) - MIN(field3) FROM example_table1 WHERE measurement IN ('example_measurement0', 'example_measurement1', 'example_measurement2') UNION ALL SELECT MAX(field1) - MIN(field1), MAX(field2) - MIN(field2), MAX(field3) - MIN(field3) FROM example_table2 WHERE measurement IN ('example_measurement0', 'example_measurement1', 'example_measurement2');",
        "config": { "amountOfData": 1234556 }
    },
    "stddev_0_0_1": {
        "influx": "from(bucket: \"example_bucket0\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\") |> filter(fn: (r) => r._field == \"field1\") |> stddev()",
        "postgres": "SELECT STDDEV(field1) FROM example_table0 WHERE measurement = 'example_measurement0';",
        "config": { "amountOfData": 1234556 }
    },
    "stddev_0_0_3": {
        "influx": "from(bucket: \"example_bucket0\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\") |> filter(fn: (r) => r._field == \"field1\" or r._field == \"field2\" or r._field == \"field3\") |> group(columns:[]) |> stddev()",
        "postgres": "SELECT STDDEV(field1), STDDEV(field2), STDDEV(field3) FROM example_table0 WHERE measurement='example_measurement0';",
        "config": { "amountOfData": 1234556 }
    },
    "stddev_0_2_1": {
        "influx": "from(bucket: \"example_bucket0\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\" or r._measurement == \"example_measurement1\" or r._measurement == \"example_measurement2\") |> filter(fn: (r) => r._field == \"field1\") |> group(columns:[]) |> stddev()",
        "postgres": "SELECT STDDEV(field1) FROM example_table0 WHERE measurement IN ('example_measurement0', 'example_measurement1', 'example_measurement2');",
        "config": { "amountOfData": 1234556 }
    },
    "stddev_0_2_3": {
        "influx": "from(bucket: \"example_bucket0\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\" or r._measurement == \"example_measurement1\" or r._measurement == \"example_measurement2\") |> filter(fn: (r) => r._field == \"field1\" or r._field == \"field2\" or r._field == \"field3\") |> group(columns:[]) |> stddev()",
        "postgres": "SELECT STDDEV(field1), STDDEV(field2), STDDEV(field3) FROM example_table0 WHERE measurement IN ('example_measurement0', 'example_measurement1', 'example_measurement2');",
        "config": { "amountOfData": 1234556 }
    },
    "stddev_2_2_1": {
        "influx": "union(tables:[from(bucket: \"example_bucket0\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\" or r._measurement == \"example_measurement1\" or r._measurement == \"example_measurement2\") |> filter(fn: (r) => r._field == \"field1\"), from(bucket: \"example_bucket1\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\" or r._measurement == \"example_measurement1\" or r._measurement == \"example_measurement2\") |> filter(fn: (r) => r._field == \"field1\"), from(bucket: \"example_bucket2\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\" or r._measurement == \"example_measurement1\" or r._measurement == \"example_measurement2\") |> filter(fn: (r) => r._field == \"field1\") )]) |> group(columns:[]) |> stddev()",
        "postgres": "SELECT STDDEV(field1) FROM example_table0 WHERE measurement IN ('example_measurement0', 'example_measurement1', 'example_measurement2') UNION ALL SELECT STDDEV(field1) FROM example_table1 WHERE measurement IN ('example_measurement0', 'example_measurement1', 'example_measurement2') UNION ALL SELECT STDDEV(field1) FROM example_table2 WHERE measurement IN ('example_measurement0', 'example_measurement1', 'example_measurement2');",
        "config": { "amountOfData": 1234556 }
    },
    "stddev_2_2_3": {
        "influx": "union(tables:[from(bucket: \"example_bucket0\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\" or r._measurement == \"example_measurement1\" or r._measurement == \"example_measurement2\") |> filter(fn: (r) => r._field == \"field1\" or r._field == \"field2\" or r._field == \"field3\"), from(bucket: \"example_bucket1\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\" or r._measurement == \"example_measurement1\" or r._measurement == \"example_measurement2\") |> filter(fn: (r) => r._field == \"field1\" or r._field == \"field2\" or r._field == \"field3\"), from(bucket: \"example_bucket2\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\" or r._measurement == \"example_measurement1\" or r._measurement == \"example_measurement2\") |> filter(fn: (r) => r._field == \"field1\" or r._field == \"field2\" or r._field == \"field3\")]) |> group(columns:[]) |> stddev()",
        "postgres": "SELECT STDDEV(field1), STDDEV(field2), STDDEV(field3) FROM example_table0 WHERE measurement IN ('example_measurement0', 'example_measurement1', 'example_measurement2') UNION ALL SELECT STDDEV(field1), STDDEV(field2), STDDEV(field3) FROM example_table1 WHERE measurement IN ('example_measurement0', 'example_measurement1', 'example_measurement2') UNION ALL SELECT STDDEV(field1), STDDEV(field2), STDDEV(field3) FROM example_table2 WHERE measurement IN ('example_measurement0', 'example_measurement1', 'example_measurement2');",
        "config": { "amountOfData": 1234556 }
    },
    "sum_0_0_1": {
        "influx": "from(bucket: \"example_bucket0\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\") |> filter(fn: (r) => r._field == \"field1\") |> sum()",
        "postgres": "SELECT SUM(field1) FROM example_table0 WHERE measurement = 'example_measurement0';",
        "config": { "amountOfData": 1234556 }
    },
    "sum_0_0_3": {
        "influx": "from(bucket: \"example_bucket0\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\") |> filter(fn: (r) => r._field == \"field1\" or r._field == \"field2\" or r._field == \"field3\") |> group(columns:[]) |> sum()",
        "postgres": "SELECT SUM(field1), SUM(field2), SUM(field3) FROM example_table0 WHERE measurement='example_measurement0';",
        "config": { "amountOfData": 1234556 }
    },
    "sum_0_2_1": {
        "influx": "from(bucket: \"example_bucket0\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\" or r._measurement == \"example_measurement1\" or r._measurement == \"example_measurement2\") |> filter(fn: (r) => r._field == \"field1\")|> group(columns:[]) |> sum()",
        "postgres": "SELECT SUM(field1) FROM example_table0 WHERE measurement IN ('example_measurement0', 'example_measurement1', 'example_measurement2');",
        "config": { "amountOfData": 1234556 }
    },
    "sum_0_2_3": {
        "influx": "from(bucket: \"example_bucket0\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\" or r._measurement == \"example_measurement1\" or r._measurement == \"example_measurement2\") |> filter(fn: (r) => r._field == \"field1\" or r._field == \"field2\" or r._field == \"field3\")|> group(columns:[]) |> sum()",
        "postgres": "SELECT SUM(field1), SUM(field2), SUM(field3) FROM example_table0 WHERE measurement IN ('example_measurement0', 'example_measurement1', 'example_measurement2');",
        "config": { "amountOfData": 1234556 }
    },
    "sum_2_2_1": {
        "influx": "union(tables:[from(bucket: \"example_bucket0\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\" or r._measurement == \"example_measurement1\" or r._measurement == \"example_measurement2\") |> filter(fn: (r) => r._field == \"field1\"), from(bucket: \"example_bucket1\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\" or r._measurement == \"example_measurement1\" or r._measurement == \"example_measurement2\") |> filter(fn: (r) => r._field == \"field1\"), from(bucket: \"example_bucket2\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\" or r._measurement == \"example_measurement1\" or r._measurement == \"example_measurement2\") |> filter(fn: (r) => r._field == \"field1\")]) |> group(columns:[]) |> sum()",
        "postgres": "SELECT SUM(field1) FROM example_table0 WHERE measurement IN ('example_measurement0', 'example_measurement1', 'example_measurement2') UNION ALL SELECT SUM(field1) FROM example_table1 WHERE measurement IN ('example_measurement0', 'example_measurement1', 'example_measurement2') UNION ALL SELECT SUM(field1) FROM example_table2 WHERE measurement IN ('example_measurement0', 'example_measurement1', 'example_measurement2');",
        "config": { "amountOfData": 1234556 }
    },
    "sum_2_2_3": {
        "influx": "union(tables:[from(bucket: \"example_bucket0\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\" or r._measurement == \"example_measurement1\" or r._measurement == \"example_measurement2\") |> filter(fn: (r) => r._field == \"field1\" or r._field == \"field2\" or r._field == \"field3\"), from(bucket: \"example_bucket1\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\" or r._measurement == \"example_measurement1\" or r._measurement == \"example_measurement2\") |> filter(fn: (r) => r._field == \"field1\" or r._field == \"field2\" or r._field == \"field3\"), from(bucket: \"example_bucket2\") |> range(start: 0) |> filter(fn: (r) => r._measurement == \"example_measurement0\" or r._measurement == \"example_measurement1\" or r._measurement == \"example_measurement2\") |> filter(fn: (r) => r._field == \"field1\" or r._field == \"field2\" or r._field == \"field3\")]) |> group(columns:[]) |> sum()",
        "postgres": "SELECT SUM(field1), SUM(field2), SUM(field3) FROM example_table0 WHERE measurement IN ('example_measurement0', 'example_measurement1', 'example_measurement2') UNION ALL SELECT SUM(field1), SUM(field2), SUM(field3) FROM example_table1 WHERE measurement IN ('example_measurement0', 'example_measurement1', 'example_measurement2') UNION ALL SELECT SUM(field1), SUM(field2), SUM(field3) FROM example_table2 WHERE measurement IN ('example_measurement0', 'example_measurement1', 'example_measurement2');",
        "config": { "amountOfData": 1234556 }
    }
}